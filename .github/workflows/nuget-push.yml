name: Publish NuGet packages

permissions: 
  packages: write

# Controls when the action will run. 
on:
  push:
    branches: 
    - main
#    - develop
    - v*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  build-test:
    uses: ./.github/workflows/build.yml

  publish-nuget:
    name: Publish NuGet package
    runs-on: ubuntu-latest
    needs: 
      - build-test

    strategy:
      fail-fast: false
      matrix:
        # Projects to publish
        project: [ 
          { name: "Main", path: "Nodsoft.MoltenObsidian/Nodsoft.MoltenObsidian.csproj" },
          { name: "Blazor", path: "Nodsoft.MoltenObsidian.Blazor/Nodsoft.MoltenObsidian.Blazor.csproj" },
          { name: "Filesystem Vault", path: "Nodsoft.MoltenObsidian.Vaults.FileSystem/Nodsoft.MoltenObsidian.Vaults.FileSystem.csproj" }
        ]
        
        # Sources to publish to
        nuget: [ 
          { name: "NuGet", source: "https://api.nuget.org", keyname: "NUGET_TOKEN" }, 
          { name: "GitHub Packages", source: "https://nuget.pkg.github.com/Nodsoft", keyname: "GITHUB_TOKEN" } 
        ]
        
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - uses: dotnet/nbgv@main
        id: nbgv

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build

      - id: is-public-release
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ steps.nbgv.outputs.PublicRelease }}

      # Publish
      - name: Build, Pack & Publish ${{ matrix.project.name }} to ${{ matrix.nuget.name }}
        id: publish_nuget
        uses: Rebel028/publish-nuget@v2.7.0
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: ${{ matrix.project.path }}
          
          # NuGet package id, used for version detection & defaults to project name
          # PACKAGE_NAME: Core
          
          # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
          VERSION_FILE_PATH: Directory.Build.props

          # Regex pattern to extract version info in a capturing group
          # VERSION_REGEX: ^\s*<Version>(.*)<\/Version>\s*$
          
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
          VERSION_STATIC: ${{ steps.nbgv.outputs.NuGetPackageVersion }}

          # Flag to toggle git tagging, enabled by default
          TAG_COMMIT: ${{ steps.is-public-release.outputs.lowercase }}

          # Format of the git tag, [*] gets replaced with actual version
          TAG_FORMAT: v${{ steps.nbgv.outputs.MajorMinorVersion }}

          # API key to authenticate with NuGet server
          NUGET_KEY: ${{ secrets[matrix.nuget.keyname] }}

          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          NUGET_SOURCE: ${{ matrix.nuget.source }}

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          # INCLUDE_SYMBOLS: false