@using Nodsoft.MoltenObsidian.Vault
@using Attributes = Dictionary<string, object>;


<nav @attributes="@NavigationAttributes(Vault)">
    <div @attributes="@LevelAttributes(Vault.Root)">
        @FolderNavigationTree(Vault.Root, isRoot: true)
    </div>
</nav>

@code {
    [Parameter, EditorRequired] public IVault Vault { get; set; }

    private static Attributes GetEmptyAttributes(object _) => [];

    [Parameter] public Func<IVault, Attributes> NavigationAttributes { get; set; } = GetEmptyAttributes;
    [Parameter] public Func<IVaultEntity, Attributes> LevelAttributes { get; set; } = GetEmptyAttributes;
    [Parameter] public Func<IVaultFolder, Attributes> FolderIndexAttributes { get; set; } = GetEmptyAttributes;
    [Parameter] public Func<IVaultFolder, Attributes> FolderAttributes { get; set; } = GetEmptyAttributes;
    [Parameter] public Func<IVaultNote, Attributes> NoteAttributes { get; set; } = GetEmptyAttributes;
    
    private @RenderFragment FolderNavigationTree(IVaultFolder folder, bool isRoot = false) => __builder =>
    {
        // Merge all subfolders and files into a single list.
        IOrderedEnumerable<KeyValuePair<string, IVaultEntity>> items = folder.Subfolders
            .Where(f => !isRoot || f.Name != ".obsidian")
            .Cast<IVaultEntity>()
            .Concat(folder.Files)
            .Select(x => new KeyValuePair<string, IVaultEntity>(x.Path, x))
            .OrderBy(x => x.Key);

        // Display the list.
        foreach (KeyValuePair<string, IVaultEntity> item in items)
        {
            if (item.Value is IVaultFolder subfolder)
            {
                <div @key="@subfolder.Path" @attributes="@LevelAttributes(subfolder)">
                    @if (subfolder.Files.Any(f 
                        => f.Name.Equals("index.md", StringComparison.OrdinalIgnoreCase) 
                        || f.Name.Equals("README.md", StringComparison.OrdinalIgnoreCase)))
                    {
                        <a href="@subfolder.Path/" @attributes="@FolderIndexAttributes(subfolder)">@subfolder.Name</a>
                    }
                    else
                    {
                        <div @attributes="@FolderAttributes(subfolder)">@subfolder.Name</div>
                    }
                    
                    @FolderNavigationTree(subfolder)
                </div>
            }
            else if (item.Value is IVaultNote file)
            {
                // The file's path should be filtered to remove the file's extension (".md").
                <a href="@(file.Path[..^3])" @attributes="@NoteAttributes(file)">@file.Name[..^3]</a>
            }
        }
    };

}